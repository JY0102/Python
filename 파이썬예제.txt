
문자열 출력



b = 25

>>> print(f"Hello {b:>10} World")

Hello          25 World

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>>> print(f"Hello {b:*^10} World")

Hello ****25**** World

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


>>> print(f"Hello {b:*>10} World")

Hello ********25 World

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


b = 255555555

>>> print(f"Hello {b:,} World")	

Hello 255,555,555 World

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


a = "Python is the best choice"
>>> a.find('b')

14

>>> a.find('k')

-1 
// 존재 하지 않으므로 -1 반환


>>> a.count('i')

2


>>> a.index('k')

존재하지 않으므로 ERROR
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


>>>  ",".join('abcd')

'a,b,c,d'


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

upper   소문자 -> 대문자
lower   대문자 -> 소문자


strip 공백 지우기

lstrip 왼쪽
rstrip 오른쪽

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>>> a = "Life is too short"
>>> a.replace("Life", "Your leg")

'Your leg is too short'

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

 isalpha = 영어로만 구성되어있는지 아닌지 ( 반환값 : T / F )
 
 isdigit = 숫자로만 구성되어 있는지

 startswith = 문자열로 시작하는지

 endswith = 문자열로 끝나는지

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

len(a)  리스트 길이

del a[1]  리스트 삭제

del a[2:]

a.append([5, 6]) 리스트 추가 

a.sort() 오름차순 정렬

a.reverse() 순서 반대로

a.index(값) 값의 인덱스 번호 출력

*존재하지 않으면 오류

a.insert(0, 4) 0번째에 4값 추가

a.remove(N)  N번째 값 삭제
 
a.pop() 리스트의 마지막 값을 가져옴. (단, 리스트에서 마지막 값은 제거됨.)

a.pop(N) N번째도 가능

a.extend(b) a 리스트와 b 리스트의 결합

**
a = [ 1 , 2, , 3]
a.append([5, 6])  ==>  [ 1 , 2 , 3 , [ 5 , 6 ]]

b = [ 5 , 6]
a.extend(b) ==> [ 1 , 2 , 3 , 5 , 6]
**


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

튜플

튜플은 요솟값을 변경할 수 없다.

따라서 튜플은 객체를 한 번 지정후에는 변경불가능.


슬라이싱 , 더하기 , 곱하기 ,  길이 구하기 등은 가능.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>>> a = {'name': 'pey', 'phone': '010-9999-1234', 'birth': '1118'}
>>> a.keys()

dict_keys(['name', 'phone', 'birth'])

-> 메모리 효율적    인덱스로 접근 불가능

>>> list(a.key())

['name', 'phone', 'birth']

-> 인덱스로 접근 가능 

>>> a.values()  

dict_values(['pey', '010-9999-1234', '1118'])

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

for key in a:  ==  for key in a.keys():

둘이 동일.


for key, value in a.items():

이러면 키 , 벨류 값 둘 다 출력

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


a.get('nokey', 'foo')


a에 nokey 라는 key 가 존재하지 않으면 'foo' 라는 디폴트 값이 반환.

만약에 디폴트 값을 설정하지 않았으면 'NONE' 출력


'name' in a ( 반환값: T/F)

a안에 'name' 이라는 key 값이 존재하는지 체크

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

집합 자료형

중복허용 X , 순서가 없음.

>>> s1 = set([1, 2, 3])
>>> s1
{1, 2, 3}

>>> s2 = set("Hello")
>>> s2
{'e', 'H', 'l', 'o'}


** 여기서 set 은 중복을 제거하기 위한 필터로 사용됨.

인덱스로 접근 불가능

-> 접근하기 위해선 리스트나 튜플에 직접 대입해서 해야함.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

>>> s1 = set([1, 2, 3, 4, 5, 6])
>>> s2 = set([4, 5, 6, 7, 8, 9])

교집합

>>> s1 & s2
{4, 5, 6}

합집합

>>> s1 | s2
{1, 2, 3, 4, 5, 6, 7, 8, 9}

차집합

>>> s1 - s2
{1, 2, 3}
>>> s2 - s1
{8, 9, 7}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

s1.add() 하나의 값 추가

s1.update(리스트) 여러가지의 값 추가


s1.remove(N) 특정 값 제거


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

Bool


true = 1 = 객체에 값이 존재

false = 0 = NONE = 객체에 값이 존재하지 않음


#예시

>>> a = [1, 2, 3, 4]
>>> while a:
...     print(a.pop())

a: 에서  a.pop을 한 뒤에 a에 값이 없을경우 false 이므로 반복문 종료

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

id(a) -> a의 주소 값?


a = [ 1 , 2 , 3]
b = a

>>> a is b

true


a[1] = 4

수정 후

>>> a
[1 , 4 , 3]

>>> b
[1 , 4 , 3]

a 와 b 둘 다 수정


>>> a = [1, 2, 3]
>>> b = a[:]

a 값을 복사하여 b에 입력

따라서 a 값 수정 -> b는 수정 안됨.  
( 
    from copy import copy 
    b = copy(a)
)

와 동일

>>> a is b

false

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


>>> [a, b] = ['python', 'life']

리스트 지정

>>> (a, b) = 'python', 'life'
>>> a, b = ('python', 'life')

튜플 지정 둘 동일
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

if / elif 문


{    
    In / NotIn  --> 리스트 , 튜플 , 딕셔너리에 있는지 체킹

    pass -> 참이든 거짓이든 해당 조건문은 지나가기


    if score >= 60:
        message = "success"
    else:
        message = "failure"

    위 아래 같음.

    message = "success" if score >= 60 else "failure"

    ** 한줄 짜리 if문에는 elif를 사용 할 수 없다.
    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

    for 반복문

    range(10) -> 0 부터 9 까지의 range의 객체
    range(1 , 11) -> 1 부터 10 까지의 range의 객체
}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

반복문 변형 ( 컴프리헨션 변환 )

{    
    원본


    >>> a = [1,2,3,4]
    >>> result = []
    >>> for num in a:
    ...     result.append(num*3)
    ...
    >>> print(result)
    [3, 6, 9, 12]


    변형 

    >>> a = [1,2,3,4]
    >>> result = [num * 3 for num in a]
    >>> print(result)
    [3, 6, 9, 12]


    if 문 추가


    >>> a = [1,2,3,4]
    >>> result = [num * 3 for num in a if num % 2 == 0]
    >>> print(result)
    [6, 12]


    ** while 은 불가능
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

함수


def 함수_이름(매개변수):
    수행할_문장1
    수행할_문장2


def add(a, b):  # a, b는 매개변수
    return a+b

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

 람다 



add =  lambda x,y: x + y


람다 활용

list = [('apple', 5), ('banana', 2), ('cherry', 7)]

list.sort( key = lambda x : x[1] )

또는

list2 = sorted(list ,key = lambda x : x[1]  )

--> 숫자 값으로 정렬
--> sort 는 원본 값 수정 , sorted 는 원본값 수정 x  복사한 값 반환.


** 클로저 문제 -> 더 찾아보기


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


*args


--> 포인터 아님.

여러개의 매개변수 값을 튜플로 묶음.

list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

>>> def add_many(*args): 
    result = 0 
    for i in args: 
        result = result + i   # *args에 입력받은 모든 값을 더한다.
    return result 


>> add_many(list)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

def print_kwargs(**kwargs):
print(kwargs)


>>> print_kwargs(a=1)
{'a': 1}
>>> print_kwargs(name='foo', age=3)
{'age': 3, 'name': 'foo'}


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

전역변수


a = 1 
def vartest(): 
    global a 
    a = a+1

vartest() 
print(a)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

문자 출력 방식


>>> for i in range(10):
    print(i, end=' ')

0 1 2 3 4 5 6 7 8 9 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

파일 읽기 / 쓰기 

// 읽기

f = open("C:/doit/새파일.txt", 'r')
while True:
    line = f.readline()
    if not line: break
    print(line)
f.close()


// 쓰기

while True:
    data = input()
    if not data: break
    print(data)
    

with open("foo.txt", "w") as f:
    f.write("Life is too short, you need python")

유징과 동일


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

line = line.strip()  # 줄 끝의 줄 바꿈 문자를 제거한다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ